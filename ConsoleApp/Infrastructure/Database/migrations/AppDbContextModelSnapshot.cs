// <auto-generated />
using System;
using ConsoleApp.Infrastructure.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ConsoleApp.infrastructure.database.migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ConsoleApp.Domain.AutomaticTellerMachines.ATM", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Balance")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("LocationId")
                        .HasColumnType("int");

                    b.Property<string>("WorkStatus")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.HasKey("Id");

                    b.HasIndex("LocationId");

                    b.ToTable("ATMs");
                });

            modelBuilder.Entity("ConsoleApp.Domain.AutomaticTellerMachines.Location", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Locations");
                });

            modelBuilder.Entity("ConsoleApp.Domain.Cards.Card", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Balance")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("CVV")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)");

                    b.Property<string>("Currency")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)");

                    b.Property<DateOnly>("ExpirationDate")
                        .HasColumnType("date");

                    b.Property<bool>("IsBlocked")
                        .HasColumnType("bit");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasMaxLength(16)
                        .HasColumnType("nvarchar(16)");

                    b.Property<string>("Pin")
                        .IsRequired()
                        .HasMaxLength(4)
                        .HasColumnType("nvarchar(4)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Cards");
                });

            modelBuilder.Entity("ConsoleApp.Domain.Merchants.Merchant", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasMaxLength(6)
                        .HasColumnType("nvarchar(6)");

                    b.HasKey("Id");

                    b.ToTable("Merchants");
                });

            modelBuilder.Entity("ConsoleApp.Domain.OnlineServices.OnlineService", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("MerchantId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("MerchantId");

                    b.ToTable("OnlineServices");
                });

            modelBuilder.Entity("ConsoleApp.Domain.Transactions.Transaction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Amount")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("CardBalance")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("CardId")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(9)
                        .HasColumnType("nvarchar(9)");

                    b.Property<DateTime>("TimeStamp")
                        .HasColumnType("datetime2");

                    b.Property<string>("TransactionType")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("nvarchar(13)");

                    b.HasKey("Id");

                    b.HasIndex("CardId");

                    b.ToTable("Transactions");

                    b.HasDiscriminator<string>("TransactionType").HasValue("Transaction");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("ConsoleApp.Domain.Users.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateOnly>("DateOfBirth")
                        .HasColumnType("date");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("ConsoleApp.Domain.Transactions.ATMTransaction", b =>
                {
                    b.HasBaseType("ConsoleApp.Domain.Transactions.Transaction");

                    b.Property<int>("ATMId")
                        .HasColumnType("int");

                    b.Property<string>("ATMTransactionType")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)");

                    b.HasIndex("ATMId");

                    b.HasDiscriminator().HasValue("ATM");
                });

            modelBuilder.Entity("ConsoleApp.Domain.Transactions.OnlineServiceTransaction", b =>
                {
                    b.HasBaseType("ConsoleApp.Domain.Transactions.Transaction");

                    b.Property<int>("OnlineServiceId")
                        .HasColumnType("int");

                    b.Property<string>("ServiceReceiptNumber")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)");

                    b.HasIndex("OnlineServiceId");

                    b.HasDiscriminator().HasValue("OnlineService");
                });

            modelBuilder.Entity("ConsoleApp.Domain.Transactions.TransferTransaction", b =>
                {
                    b.HasBaseType("ConsoleApp.Domain.Transactions.Transaction");

                    b.Property<decimal>("RecipientCardBalance")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("RecipientCardId")
                        .HasColumnType("int");

                    b.HasIndex("RecipientCardId");

                    b.HasDiscriminator().HasValue("Transfer");
                });

            modelBuilder.Entity("ConsoleApp.Domain.AutomaticTellerMachines.ATM", b =>
                {
                    b.HasOne("ConsoleApp.Domain.AutomaticTellerMachines.Location", "Location")
                        .WithMany("ATMs")
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Location");
                });

            modelBuilder.Entity("ConsoleApp.Domain.Cards.Card", b =>
                {
                    b.HasOne("ConsoleApp.Domain.Users.User", "User")
                        .WithMany("Cards")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("ConsoleApp.Domain.OnlineServices.OnlineService", b =>
                {
                    b.HasOne("ConsoleApp.Domain.Merchants.Merchant", "Merchant")
                        .WithMany("OnlineServices")
                        .HasForeignKey("MerchantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Merchant");
                });

            modelBuilder.Entity("ConsoleApp.Domain.Transactions.Transaction", b =>
                {
                    b.HasOne("ConsoleApp.Domain.Cards.Card", "Card")
                        .WithMany("OwnTransactions")
                        .HasForeignKey("CardId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Card");
                });

            modelBuilder.Entity("ConsoleApp.Domain.Transactions.ATMTransaction", b =>
                {
                    b.HasOne("ConsoleApp.Domain.AutomaticTellerMachines.ATM", "ATM")
                        .WithMany()
                        .HasForeignKey("ATMId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ATM");
                });

            modelBuilder.Entity("ConsoleApp.Domain.Transactions.OnlineServiceTransaction", b =>
                {
                    b.HasOne("ConsoleApp.Domain.OnlineServices.OnlineService", "OnlineService")
                        .WithMany()
                        .HasForeignKey("OnlineServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("OnlineService");
                });

            modelBuilder.Entity("ConsoleApp.Domain.Transactions.TransferTransaction", b =>
                {
                    b.HasOne("ConsoleApp.Domain.Cards.Card", "RecipientCard")
                        .WithMany("ReceivedTransactions")
                        .HasForeignKey("RecipientCardId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("RecipientCard");
                });

            modelBuilder.Entity("ConsoleApp.Domain.AutomaticTellerMachines.Location", b =>
                {
                    b.Navigation("ATMs");
                });

            modelBuilder.Entity("ConsoleApp.Domain.Cards.Card", b =>
                {
                    b.Navigation("OwnTransactions");

                    b.Navigation("ReceivedTransactions");
                });

            modelBuilder.Entity("ConsoleApp.Domain.Merchants.Merchant", b =>
                {
                    b.Navigation("OnlineServices");
                });

            modelBuilder.Entity("ConsoleApp.Domain.Users.User", b =>
                {
                    b.Navigation("Cards");
                });
#pragma warning restore 612, 618
        }
    }
}
